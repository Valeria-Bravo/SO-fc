Descripción del proyecto:

Primeramente, este proyecto o trabajo brinda múltiples soluciones al problema original llamado "filósofos comensales" en donde la 
la problemática surge cuando debemos de hacer que ninguno de los filósofos muera de hambre por decirlo así.

Ahora, este proyecto se divide en 3 partes o en tres paquetes: El primer paquete se llama "filosofo.eParcial" donde se trata de 
implementar al máximo todos los puntos que se pidieron con anteriormente, este paquete va enlazado con la solución llamada 
“varios turnos” en donde se debe lograr que sincronizada mente los filósofos puedan ser capaz de comer y no morir de hambre 
como el primer objetivo en general, claro como ya lo mencioné antes, con implementaciones nuevas, ya sea el estómago, la función
Random, entre otras funciones, en el video explicativo se tomarán puntos específicos para una mayor comprensión del mismo.

El segundo paquete es "filosofos01" donde se adecua y se modifica la solución de turno cíclico al problema establecido, con lo que
se encontraba anteriormente y con los nuevos requisitos pedidos, reutilizando parte de las clases como lo 
son “Tenedor” pero manteniendo la esencia de la solución y el problema.

Por último, tenemos el paquete llamado "filosofo. deadlock" donde se implementa lo que es llamado "deadlock" o también
llamado "muerte por inanición" donde si los filósofos toman a la vez el mismo utensilio del mismo para poder comer entonces
morirán de hambre, reutilizando, claro está, algunas clases para que el código cobre sentido, este código se hizo en un paquete 
aparte ya que, si lo ponía en el código correcto, interrumpiría las acciones del otro y no permitiría mostrar una
solución óptima, dejando así de lado su avance, por ello se realizó así para una compilación aparte.
